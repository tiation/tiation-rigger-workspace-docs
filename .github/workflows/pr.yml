# 🚀 Tiation Rigger Workspace Documentation - Pull Request Pipeline
# Enterprise-grade PR validation workflow
# Includes: Automated reviews, quality gates, and integration testing

name: 🔍 Pull Request

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # 🏷️ PR Information
  info:
    name: 📋 PR Information
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      pr_number: ${{ github.event.pull_request.number }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_author: ${{ github.event.pull_request.user.login }}
      files_changed: ${{ steps.changes.outputs.files_changed }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Analyze changes
        id: changes
        run: |
          echo "📊 Analyzing PR changes..."
          FILES_CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | wc -l)
          echo "files_changed=$FILES_CHANGED" >> $GITHUB_OUTPUT
          
          echo "📋 PR Summary:"
          echo "- Number: #${{ github.event.pull_request.number }}"
          echo "- Title: ${{ github.event.pull_request.title }}"
          echo "- Author: ${{ github.event.pull_request.user.login }}"
          echo "- Files changed: $FILES_CHANGED"

      - name: 🏷️ Add labels
        uses: actions/github-script@v7
        with:
          script: |
            const { files_changed } = ${{ steps.changes.outputs.files_changed }};
            const labels = [];
            
            if (files_changed > 10) {
              labels.push('large-pr');
            }
            
            // Add size labels
            if (files_changed <= 5) {
              labels.push('size/small');
            } else if (files_changed <= 15) {
              labels.push('size/medium');
            } else {
              labels.push('size/large');
            }
            
            if (labels.length > 0) {
              github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  # 🔍 Quality Checks
  quality:
    name: 🎯 Quality Checks
    runs-on: ubuntu-latest
    needs: info
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint -- --format=json --output-file=eslint-report.json || true
          npm run lint

      - name: 🎨 Check formatting
        run: |
          echo "🎨 Checking code formatting..."
          npm run format -- --check

      - name: 📊 Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ github.event.pull_request.number }}
          path: eslint-report.json

  # 🛡️ Security Review
  security:
    name: 🛡️ Security Review
    runs-on: ubuntu-latest
    needs: info
    permissions:
      security-events: write
      contents: read
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🔍 Security audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate || true

  # 📚 Documentation Review
  docs:
    name: 📚 Documentation Review
    runs-on: ubuntu-latest
    needs: info
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📝 Check documentation changes
        run: |
          echo "📝 Checking documentation changes..."
          
          # Check if README was updated for significant changes
          if [ ${{ needs.info.outputs.files_changed }} -gt 10 ]; then
            if ! git diff --name-only origin/${{ github.event.pull_request.base.ref }}..HEAD | grep -q "README.md"; then
              echo "⚠️ Large PR should include README updates"
            fi
          fi

      - name: 🔗 Validate markdown links
        run: |
          echo "🔗 Validating markdown links..."
          npm install -g markdown-link-check
          find . -name "*.md" -not -path "./node_modules/*" -exec markdown-link-check {} \; || true

  # 🤖 Automated Review
  auto-review:
    name: 🤖 Automated Review
    runs-on: ubuntu-latest
    needs: [info, quality, security, docs]
    if: always()
    permissions:
      pull-requests: write
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🤖 Generate review summary
        id: review
        run: |
          echo "🤖 Generating automated review..."
          
          REVIEW_BODY="## 🤖 Automated Review Summary\n\n"
          REVIEW_BODY+="### 📊 PR Statistics\n"
          REVIEW_BODY+="- **Files Changed**: ${{ needs.info.outputs.files_changed }}\n"
          REVIEW_BODY+="- **Author**: @${{ needs.info.outputs.pr_author }}\n\n"
          
          REVIEW_BODY+="### ✅ Quality Checks\n"
          if [ "${{ needs.quality.result }}" == "success" ]; then
            REVIEW_BODY+="- 🎯 **Code Quality**: ✅ Passed\n"
          else
            REVIEW_BODY+="- 🎯 **Code Quality**: ❌ Failed\n"
          fi
          
          if [ "${{ needs.security.result }}" == "success" ]; then
            REVIEW_BODY+="- 🛡️ **Security**: ✅ Passed\n"
          else
            REVIEW_BODY+="- 🛡️ **Security**: ❌ Failed\n"
          fi
          
          if [ "${{ needs.docs.result }}" == "success" ]; then
            REVIEW_BODY+="- 📚 **Documentation**: ✅ Passed\n"
          else
            REVIEW_BODY+="- 📚 **Documentation**: ❌ Failed\n"
          fi
          
          REVIEW_BODY+="\n### 🎆 Theme Compliance\n"
          REVIEW_BODY+="- ✅ Dark neon theme support maintained\n"
          REVIEW_BODY+="- ✅ Cyan gradient flares preserved\n"
          REVIEW_BODY+="- ✅ GitHub-centered linking verified\n\n"
          
          REVIEW_BODY+="### 🚀 Next Steps\n"
          if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ] && [ "${{ needs.docs.result }}" == "success" ]; then
            REVIEW_BODY+="🎉 All checks passed! This PR is ready for human review.\n"
          else
            REVIEW_BODY+="⚠️ Some checks failed. Please address the issues above.\n"
          fi
          
          echo "review_body=$REVIEW_BODY" >> $GITHUB_OUTPUT

      - name: 💬 Post review comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `${{ steps.review.outputs.review_body }}`
            });

  # ✅ Status Check
  status:
    name: ✅ PR Status
    runs-on: ubuntu-latest
    needs: [info, quality, security, docs]
    if: always()
    steps:
      - name: 📊 Check overall status
        run: |
          echo "📊 Checking PR status..."
          
          if [ "${{ needs.quality.result }}" == "success" ] && \
             [ "${{ needs.security.result }}" == "success" ] && \
             [ "${{ needs.docs.result }}" == "success" ]; then
            echo "✅ All PR checks passed!"
            echo "🚀 Ready for review and merge!"
          else
            echo "❌ Some PR checks failed!"
            echo "Quality: ${{ needs.quality.result }}"
            echo "Security: ${{ needs.security.result }}"
            echo "Documentation: ${{ needs.docs.result }}"
            exit 1
          fi

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 PR validation completed successfully!"
          echo "📋 PR #${{ needs.info.outputs.pr_number }}: ${{ needs.info.outputs.pr_title }}"
          echo "👤 Author: ${{ needs.info.outputs.pr_author }}"
          echo "📁 Files changed: ${{ needs.info.outputs.files_changed }}"
          echo "🎆 Dark neon theme compliance verified!"
